#!/bin/bash

# Script centralizador para gerenciar todos os servi√ßos TOTVS

COMPOSE_FILE="docker-compose.yml"
OVERRIDE_FILE="docker-compose.override.yml"

# Verifica o arquivo docker-compose.override.yml
if [ -f "$OVERRIDE_FILE" ]; then
  COMPOSE_OPTIONS="-f $COMPOSE_FILE -f $OVERRIDE_FILE"
else
  COMPOSE_OPTIONS="-f $COMPOSE_FILE"
fi

# Fun√ß√£o para build das imagens
function build() {
  echo "üõë Brust - TOTVS - Parando todos os servi√ßos antigos (se existirem)..."
  docker-compose $COMPOSE_OPTIONS stop 2>/dev/null || true

  echo "üî® Brust - TOTVS - Removendo todos os servi√ßos antigos (se existirem)..."
  docker-compose $COMPOSE_OPTIONS rm -f 2>/dev/null || true

  echo "üî® Brust - TOTVS - Iniciando build de todas as imagens..."
  ./1_postgres_image.sh build
  ./2_license_server_image.sh build
  ./3_dbaccess_image.sh build
  ./4_protheus_image.sh build
  ./5_smartview_image.sh build
}

# Fun√ß√£o para rodar os containers
function run() {

  if docker-compose $COMPOSE_OPTIONS ps --services --filter "status=running" | grep -q .; then
    echo "‚ö†Ô∏è Brust - TOTVS - Alguns servi√ßos j√° est√£o rodando. Parando e removendo todos..."
    stop
  fi

  clean

  BUILD=true
  for arg in "$@"; do
    if [ "$arg" == "--no-build" ]; then
      BUILD=false
    fi
  done

  if $BUILD; then
    build
  fi

  echo "üöÄ Brust - TOTVS - Subindo todos os servi√ßos na ordem: postgres, license, dbaccess, protheus, smartview..."
  ./1_postgres_image.sh run "$@"
  ./2_license_server_image.sh run "$@"
  ./3_dbaccess_image.sh run "$@"
  ./4_protheus_image.sh run "$@"
  ./5_smartview_image.sh run "$@"
}

# Fun√ß√£o para parar e remover os containers
function stop() {
  echo "üõë Brust - TOTVS - Parando e removendo todos os servi√ßos (se existirem)..."
  docker-compose $COMPOSE_OPTIONS rm -f 2>/dev/null || true
}

# Fun√ß√£o para limpar volumes n√£o utilizados
function clean() {
  echo "üßπ Brust - TOTVS - Limpando volumes n√£o usados..."
  docker volume prune -f
}

# Fun√ß√£o para exibir logs de todos os servi√ßos
function logs() {
  echo "üìã Brust - TOTVS - Logs de todos os servi√ßos:"
  docker-compose $COMPOSE_OPTIONS logs -f
}

# Fun√ß√£o de ajuda
function help() {
  echo "Brust - TOTVS - Uso: $0 [comando]"
  echo ""
  echo "Comandos dispon√≠veis:"
  echo "  build   ‚Üí Builda as imagens de todos os servi√ßos"
  echo "  run     ‚Üí Para, limpa, builda e sobe todos os servi√ßos na ordem"
  echo "  run --no-build     ‚Üí Para, limpa, sem buildar e sobe todos os servi√ßos na ordem"
  echo "  stop    ‚Üí Para e remove todos os servi√ßos"
  echo "  clean   ‚Üí Remove volumes n√£o usados"
  echo "  logs    ‚Üí Mostra logs de todos os servi√ßos"
  echo "  help    ‚Üí Exibe esta ajuda"
}

# Executa o comando passado
case "$1" in
  build) build ;;
  run) run "$@" ;;
  stop) stop ;;
  clean) clean ;;
  logs) logs ;;
  help|*) help ;;
esac
